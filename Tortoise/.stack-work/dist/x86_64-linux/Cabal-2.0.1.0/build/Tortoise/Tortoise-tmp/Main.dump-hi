
==================== FINAL INTERFACE ====================
2019-07-06 03:00:09.45169 UTC

interface main:Main 8022
  interface hash: 773d0a94d3c3bb122cd49581fa5b542b
  ABI hash: 7dbe4b7dc0d7894fa49daccb9ecb2d09
  export-list hash: b3d556c6284c31e16b5a3084acd43bbf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7c539402ee09adf834e24fd1b4df81eb
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.circle
  Main.circlograph
  Main.circlographograph
  Main.ex1
  Main.ex2
  Main.ex3
  Main.ex4
  Main.ex5
  Main.ex6
  Main.ex7
  Main.flower
  Main.flowerograph
  Main.flowers
  Main.flowers'
  Main.main
  Main.polygon
  Main.square
  Main.squareograph
module dependencies: Tortoise TortoiseCombinators TortoiseGraphics
package dependencies: FontyFruity-0.5.3.3 JuicyPixels-3.2.9.3
                      Rasterific-0.7.2.1 StateVar-1.1.0.4 array-0.5.2.0 base-4.10.1.0
                      base-orphans-0.6 bifunctors-5.5 binary-0.8.5.1 bytestring-0.10.8.2
                      comonad-5.0.2 containers-0.5.10.2 contravariant-1.4 deepseq-1.4.3.0
                      directory-1.3.0.2 distributive-0.5.3 dlist-0.8.0.3 exceptions-0.8.3
                      filepath-1.4.1.2 free-4.12.4 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.6.1 integer-gmp-1.0.1.0 mtl-2.2.1
                      prelude-extras-0.4.0.3 primitive-0.6.2.0 profunctors-5.2.1
                      semigroupoids-5.2.1 stm-2.4.4.1 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.2.2 time-1.8.0.2
                      transformers-0.5.2.0 transformers-compat-0.5.1.4 unix-2.7.2.2
                      unordered-containers-0.2.8.0 vector-0.12.0.1
                      vector-algorithms-0.7.0.1 xml-1.3.14 zlib-0.6.1.2
orphans: stm-2.4.4.1:Control.Monad.STM
         hashable-1.2.6.1:Data.Hashable.Generic
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.2.2:Data.Text.Lazy text-1.2.2.2:Data.Text
         text-1.2.2.2:Data.Text.Show binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: JuicyPixels-3.2.9.3:Codec.Picture.Tga
                         JuicyPixels-3.2.9.3:Codec.Picture.Tiff
                         JuicyPixels-3.2.9.3:Codec.Picture.Types
                         Rasterific-0.7.2.1:Graphics.Rasterific.Compositor
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5:Data.Bifunctor.Biff
                         bifunctors-5.5:Data.Bifunctor.Clown
                         bifunctors-5.5:Data.Bifunctor.Flip
                         bifunctors-5.5:Data.Bifunctor.Join
                         bifunctors-5.5:Data.Bifunctor.Joker
                         bifunctors-5.5:Data.Bifunctor.Product
                         bifunctors-5.5:Data.Bifunctor.Sum
                         bifunctors-5.5:Data.Bifunctor.Tannen
                         bifunctors-5.5:Data.Bifunctor.Wrapped
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.3:Data.DList ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         unordered-containers-0.2.8.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2:Codec.Compression.Zlib.Stream
import  -/  JuicyPixels-3.2.9.3:Codec.Picture.Png.Export cfc9089acce628c4080c83c566b18ebb
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
import  -/  Tortoise b1059e1036400af094eb900238a21641
  exports: 17bb42b7abb4b8f657ba026147798592
  Distance b7fa590ff6b97eb87414748743af94f0
  Instructions da54e1c72fc39648f154ea8046be7b10
  Move 1c11e679b0f31ed289fcfaac5c620661
  PenDown 2e29a2694829a6b8d9b34fbe90c567d3
  PenUp 9a17290b52cd724e4ec156284b2aec30
  SetColour 9c707e0dc97e363d4ce5f3b36fc5dfc4
  SetStyle af735bdc390176ca1e9e9a0270e813c8
  Solid 22a82b2f52cf8732b26faf84e54cfb86
  Stop 720ff061e412743d5941dee996ca3497
  Turn 4f995b66f8feb55668f43d914079042f
  blueC d78a8b42b180e9e5e81fef69d389b64d
  brown 103feaccc8cd73b48f6e7a0c620300c2
  greenC d78a8b42b180e9e5e81fef69d389b64d
  redC d78a8b42b180e9e5e81fef69d389b64d
  tortoisePic ad6091a5b5be6ed3c3b5954609f63863
  white 915994a821cec26787d7a05791bd5895
  yellow 660f41d9fb328bb4973b5d067d2d66bf
import  -/  TortoiseCombinators c3dd7aa88eb9f05429fbb7700286783e
  exports: 735a505de1f9270ae5e1398b77de11fc
  andThen a8eafcb843ead665327d04180c554ef0
  invisibly ff65a42e170b028a0882472b5db423c9
  loop ac55332e876cf19c202a5e4627a706d6
  overlay 2602ab34a4332ce4e0f03fbdbc926ec1
  retrace f7497ba520ea4debee821545e575df8d
import  -/  TortoiseGraphics fbf1cd73e1152a3fab519c9073e9ce84
  exports: 395495c241010dd01e419849fdad3280
  drawPicture 0616a401492245fe19f1cc1fe5910b7d
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
29ea3ea2da56e7b2c9932c5c96e814e7
  $wflowers ::
    Tortoise.Instructions
    -> (# Tortoise.Angle, Tortoise.Instructions #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Tortoise.Instructions) ->
                 (# Main.ex35,
                    let {
                      flowers2 :: Tortoise.Instructions
                      = TortoiseCombinators.andThen
                          (TortoiseCombinators.andThen
                             (Tortoise.SetColour
                                Tortoise.brown
                                (Tortoise.SetStyle
                                   Main.ex26
                                   (Tortoise.Move
                                      Main.ex25
                                      (Tortoise.SetStyle
                                         Main.ex23
                                         (Tortoise.SetColour Tortoise.yellow w)))))
                             Main.ex28)
                          (TortoiseCombinators.retraceHelper
                             (Tortoise.SetColour
                                Tortoise.brown
                                (Tortoise.SetStyle
                                   Main.ex26
                                   (Tortoise.Move
                                      Main.ex25
                                      (Tortoise.SetStyle
                                         Main.ex23
                                         (Tortoise.SetColour Tortoise.yellow w)))))
                             Tortoise.white
                             TortoiseCombinators.retrace3
                             GHC.Types.True
                             TortoiseCombinators.retrace1)
                    } in
                    TortoiseCombinators.andThen
                      flowers2
                      (Tortoise.Turn Main.ex18 flowers2) #)) -}
b84b15143c0b5b892b80e3e6ce7e1e9f
  $wpolygon ::
    GHC.Prim.Int# -> GHC.Integer.Type.Integer -> Tortoise.Instructions
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: GHC.Integer.Type.Integer) ->
                 TortoiseCombinators.$wloop
                   ww
                   (Tortoise.Move
                      w
                      (Tortoise.Turn
                         (case GHC.Prim./##
                                 360.0##
                                 (GHC.Prim.int2Double# ww) of wild4 { DEFAULT ->
                          case {__pkg_ccall base-4.10.1.0 GHC.Prim.Double#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Double# #)}
                                 wild4
                                 GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                          case GHC.Integer.Type.decodeDoubleInteger
                                 ds3 of ds4 { (#,#) ipv ipv1 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# ipv1 0#) of wild1 {
                            GHC.Types.False -> GHC.Integer.Type.shiftLInteger ipv ipv1
                            GHC.Types.True
                            -> case GHC.Integer.Type.integerToInt ipv of n { DEFAULT ->
                               GHC.Integer.Type.smallInteger
                                 (GHC.Prim.uncheckedIShiftRA#
                                    n
                                    (GHC.Prim.negateInt# ipv1)) } } } } })
                         Tortoise.Stop))) -}
75ca65555e8d2d26ae4d89228e2aaca9
  circle :: Tortoise.Instructions
  {- Unfolding: (Main.$wpolygon 36# Main.circle1) -}
f0cfaf3a92f53a5a802329af8eb6bce9
  circle1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
d6994fbace6bf555a608612b67952322
  circlograph :: Tortoise.Instructions
  {- Unfolding: (TortoiseCombinators.$wloop
                   360#
                   Main.circlograph1) -}
ea8451372f2fd564fb76fd31009d30e2
  circlograph1 :: Tortoise.Instructions
  {- Strictness: m2,
     Unfolding: (Tortoise.Turn Main.circle1 Main.circle) -}
98cc347fae1d4af4aac16c3da4e2b151
  circlographograph :: Tortoise.Instructions
  {- Unfolding: (TortoiseCombinators.overlay
                   (Main.circlographograph_go Main.circlographograph1)) -}
88b8b9fadaa26edb027664aa3b534e39
  circlographograph1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
15d0b809ad963dfa19579e33f23b1d5b
  circlographograph_go ::
    GHC.Integer.Type.Integer -> [Tortoise.Instructions]
  {- Arity: 1, Strictness: <S,U> -}
2d3712ef648ec5f9e071a070e9dbca79
  ex1 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Tortoise.Move Main.ex1_s Main.ex11) -}
3fae6da5a4e6935edd10f0ac4e8127d9
  ex11 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Tortoise.Turn Main.ex18 Main.ex12) -}
4e3bc505df7c9b6e746a12eaeeffb962
  ex12 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Tortoise.Move Main.ex1_s Main.ex13) -}
c0c59f8f9c8022da7935db85e909cdd2
  ex13 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Tortoise.Turn Main.ex18 Main.ex14) -}
e00a227dd753df684775f8eb7d424d6d
  ex14 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Tortoise.Move Main.ex1_s Main.ex15) -}
e757557657767630e2ba6b46259b6c97
  ex15 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Tortoise.Turn Main.ex18 Main.ex16) -}
c7d59f50f6477bd3a93aaa414d2e7769
  ex16 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Tortoise.Move Main.ex1_s Main.ex17) -}
1dc2c87ae3c01a41575a1d1cc65c0f51
  ex17 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Tortoise.Turn Main.ex18 Tortoise.Stop) -}
86f5771e7e5b7e9c7167e0f6652d836e
  ex18 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (90) -}
68d9b54dfed650dea0fb97564722d12b
  ex19 :: Tortoise.Instructions
  {- Strictness: m3,
     Unfolding: (Tortoise.SetStyle Main.ex26 Main.ex20) -}
562d351fb5ea6fecac18dd45cbfc8175
  ex1_s :: Tortoise.Distance
  {- HasNoCafRefs, Unfolding: (100) -}
fce29ca2aadf707e15ca8275dfd73691
  ex2 :: Tortoise.Instructions
  {- Unfolding: InlineRule (0, True, True) Main.squareograph -}
ca5361715e084425f77cbdc75e6f7008
  ex20 :: Tortoise.Instructions
  {- Strictness: m1,
     Unfolding: (Tortoise.Move Main.ex25 Main.ex21) -}
fbb61bb9452ac5e28c8684c994ff428e
  ex21 :: Tortoise.Instructions
  {- Strictness: m3,
     Unfolding: (Tortoise.SetStyle Main.ex23 Main.ex22) -}
b005d7bbdf92b87f8c510ca5adfb8c5a
  ex22 :: Tortoise.Instructions
  {- Strictness: m4,
     Unfolding: (Tortoise.SetColour
                   Tortoise.yellow
                   Main.squareograph) -}
53b101679ab292cd5d3172b28d7bb673
  ex23 :: Tortoise.LineStyle
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Tortoise.Solid Main.ex24) -}
2c769acae05ade25a1d5b19130d6da5a
  ex24 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
dacb362621afafb32a442fa12c9465c1
  ex25 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (300) -}
7e42295c0674046c248ff83e366bfa7d
  ex26 :: Tortoise.LineStyle
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Tortoise.Solid Main.ex27) -}
00d0f303431ba693e0f0e9f73bdc66e1
  ex27 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
f3b1b1f0f203900f527dc1bdd8069880
  ex28 :: Tortoise.Instructions
  {- Unfolding: (TortoiseCombinators.andThen
                   TortoiseCombinators.invisibly2
                   (TortoiseCombinators.invisiblyHelper
                      Main.ex29
                      TortoiseCombinators.invisibly1)) -}
4b2f1256e4755b491d400754d94ab070
  ex29 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Tortoise.Turn Main.ex34 Main.ex30) -}
4519872d337f9aeb3fa3c5511ca2283c
  ex3 :: Tortoise.Instructions
  {- Unfolding: InlineRule (0, True, True) Main.circlograph -}
32acab14fa1f60c7a1a7af5aedd1a229
  ex30 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Tortoise.Move Main.ex33 Main.ex31) -}
805224aa3a42afd66622e1616a9421c1
  ex31 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Tortoise.Turn Main.ex32 Tortoise.Stop) -}
cbd91fc453f070aaf2c57c4dc32d1bef
  ex32 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-45) -}
913491fba72619fac9e74cb8a46f9859
  ex33 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (424) -}
0beb1713f8dda52d0848bd47b625e694
  ex34 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (135) -}
798b5cd50610301cf868490733191489
  ex35 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (45) -}
052fc07491992de56c8d9d81503554e4
  ex4 :: Tortoise.Instructions
  {- Strictness: m4,
     Unfolding: (Tortoise.SetColour Tortoise.brown Main.ex19) -}
e3aac9feb57c5e8a12bf7a95fb2f6fd9
  ex5 :: Tortoise.Instructions
  {- Unfolding: (case Main.$wflowers
                        Main.circlograph of ww { (#,#) ww1 ww2 ->
                 Tortoise.Turn ww1 ww2 }) -}
485612eb99b3a3a05d7c35a56bb0271f
  ex6 :: Tortoise.Instructions
  {- Unfolding: (Main.flowerograph Main.squareograph) -}
75f402d65a2e757d95cfc98611dd63ab
  ex7 :: Tortoise.Instructions
  {- Unfolding: InlineRule (0, True, True) Main.circlographograph -}
d2968011492a63d069f6d5bd84f0e5bd
  flower :: Tortoise.Instructions -> Tortoise.Instructions
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (top :: Tortoise.Instructions) ->
                 Tortoise.SetColour
                   Tortoise.brown
                   (Tortoise.SetStyle
                      Main.ex26
                      (Tortoise.Move
                         Main.ex25
                         (Tortoise.SetStyle
                            Main.ex23
                            (Tortoise.SetColour Tortoise.yellow top))))) -}
5748e384aa0abca20bb874a051629094
  flowerograph :: Tortoise.Instructions -> Tortoise.Instructions
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (top :: Tortoise.Instructions) ->
                 let {
                   lvl4 :: Tortoise.Instructions
                   = Tortoise.SetColour Tortoise.yellow top
                 } in
                 let {
                   lvl5 :: Tortoise.Instructions = Tortoise.SetStyle Main.ex23 lvl4
                 } in
                 let {
                   lvl6 :: Tortoise.Instructions = Tortoise.Move Main.ex25 lvl5
                 } in
                 let {
                   lvl7 :: Tortoise.Instructions = Tortoise.SetStyle Main.ex26 lvl6
                 } in
                 let {
                   lvl8 :: Tortoise.Instructions
                   = Tortoise.SetColour Tortoise.brown lvl7
                 } in
                 letrec {
                   go :: GHC.Integer.Type.Integer -> [Tortoise.Instructions]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x :: GHC.Integer.Type.Integer) ->
                     case GHC.Integer.Type.gtInteger#
                            x
                            Main.flowerograph1 of wild { DEFAULT ->
                     case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                       GHC.Types.False
                       -> GHC.Types.:
                            @ Tortoise.Instructions
                            (Tortoise.Turn x lvl8)
                            (go (GHC.Integer.Type.plusInteger x Main.circle1))
                       GHC.Types.True -> GHC.Types.[] @ Tortoise.Instructions } }
                 } in
                 TortoiseCombinators.overlay (go Main.circlographograph1)) -}
29bee09123fdea7c0167bb203907a437
  flowerograph1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (350) -}
98c94b6ba5a02c5367b21e85fddeafa4
  flowers :: Tortoise.Instructions -> Tortoise.Instructions
  {- Arity: 1, Strictness: <L,U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Tortoise.Instructions) ->
                 case Main.$wflowers w of ww { (#,#) ww1 ww2 ->
                 Tortoise.Turn ww1 ww2 }) -}
97a8a11ea963f9b5b7ca19e893eee49c
  flowers' :: Tortoise.Instructions -> Tortoise.Instructions
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (top :: Tortoise.Instructions) ->
                 let {
                   f :: Tortoise.Instructions = Tortoise.SetColour Tortoise.yellow top
                 } in
                 let {
                   f1 :: Tortoise.Instructions = Tortoise.SetStyle Main.ex23 f
                 } in
                 let {
                   f2 :: Tortoise.Instructions = Tortoise.Move Main.ex25 f1
                 } in
                 let {
                   f3 :: Tortoise.Instructions = Tortoise.SetStyle Main.ex26 f2
                 } in
                 let {
                   f4 :: Tortoise.Instructions = Tortoise.SetColour Tortoise.brown f3
                 } in
                 TortoiseCombinators.overlay
                   (GHC.Types.:
                      @ Tortoise.Instructions
                      (Tortoise.Turn Main.ex35 f4)
                      (GHC.Types.:
                         @ Tortoise.Instructions
                         (Tortoise.Turn Main.ex34 f4)
                         (GHC.Types.:
                            @ Tortoise.Instructions
                            (Tortoise.Turn Main.flowers'2 f4)
                            (GHC.Types.:
                               @ Tortoise.Instructions
                               (Tortoise.Turn Main.flowers'1 f4)
                               (GHC.Types.[] @ Tortoise.Instructions)))))) -}
269367a9a1e492b03481a36e117071ea
  flowers'1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (315) -}
cb4f2a712adc5c64092989370df63db3
  flowers'2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (225) -}
e6630a58a2cb495e42d43e708ea73983
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
43c711907fb67dc998800efb2b87f287
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 System.IO.withBinaryFile1
                   @ ()
                   Main.main4
                   GHC.IO.IOMode.WriteMode
                   Main.main2
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   eta) -}
bf4ad08f57c214b23bf51097e72a3060
  main2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (ds :: GHC.IO.Handle.Types.Handle)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case TortoiseGraphics.drawPicture
                        Main.main3 of ww { Codec.Picture.Types.Image ww1 ww2 ww3 ->
                 Data.ByteString.Lazy.appendFile2
                   ds
                   (Codec.Picture.Png.Export.$w$sgenericEncodePng2
                      (GHC.Base.Nothing @ Codec.Picture.Types.Palette)
                      (GHC.Base.Nothing @ Codec.Picture.Png.Export.PaletteAlpha)
                      Codec.Picture.Png.Type.PngTrueColourWithAlpha
                      (GHC.Types.[]
                         @ (Codec.Picture.Metadata.Elem Codec.Picture.Metadata.Keys))
                        `cast`
                      (Sym (Codec.Picture.Metadata.N:Metadatas[0]))
                      ww1
                      ww2
                      ww3)
                   eta1 }) -}
3cbeebe5b70487865613d8a947c69c04
  main3 :: Tortoise.Picture
  {- Unfolding: (case Tortoise.$wtortoise
                        Main.circlographograph
                        Tortoise.start of ww { (#,#) ww1 ww2 ->
                 ww1 }) -}
4923bea4e318ea49761a1149085ef9ef
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main5) -}
bd346b98064519ff9bf5fe679d9694c6
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tortoise.png"#) -}
bad4e0af382bfbadbb5552bee19b1d81
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
a972113fdb7d6369e64a009d175dcdcd
  polygon ::
    GHC.Types.Int -> GHC.Integer.Type.Integer -> Tortoise.Instructions
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Integer.Type.Integer) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wpolygon ww1 w1 }) -}
250e4ee0c591b9226bb8002846bfa4ca
  square :: Tortoise.Distance -> Tortoise.Instructions
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: Tortoise.Distance) ->
                 Tortoise.Move
                   s
                   (Tortoise.Turn
                      Main.ex18
                      (Tortoise.Move
                         s
                         (Tortoise.Turn
                            Main.ex18
                            (Tortoise.Move
                               s
                               (Tortoise.Turn Main.ex18 (Tortoise.Move s Main.ex17))))))) -}
d0dd7f4fa37b7fa88b5f2690a74450bf
  squareograph :: Tortoise.Instructions
  {- Unfolding: (TortoiseCombinators.$wloop
                   36#
                   Main.squareograph1) -}
039c3b9b9a7fdad6a31181a25210c072
  squareograph1 :: Tortoise.Instructions
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Tortoise.Turn Main.circle1 Main.ex1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

